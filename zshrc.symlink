#!/usr/bin/env zsh

# Setup rbenv 

# --no-hash makes it quicker and it's enough to run after installations
eval "$(rbenv init - --no-rehash)"

# Antigen

# Installs antigen if it's not found
if [[ ! -f ~/.antigen/antigen.zsh ]]; then
    mkdir -v ~/.antigen
    curl -L git.io/antigen > ~/.antigen/antigen.zsh
fi
source ~/.antigen/antigen.zsh

antigen bundle rupa/z                           # Frecency based directory switching
antigen bundle mafredri/zsh-async               # async support for pure theme
antigen bundle sindresorhus/pure                # My preferred minimal theme
antigen bundle zsh-users/zsh-autosuggestions    # Autosuggestions
antigen bundle zdharma/fast-syntax-highlighting # Syntax highlighting

antigen apply

# Global Variables

export HISTFILE=$HOME/.zsh_history              # History file
export HISTSIZE=10000                           # Maximum number of events stored internally
export SAVEHIST=10000                           # Maximum number of events stored in the file
export CLICOLOR=true                            # Enable colors for 'ls' (at least under macOS)
export EDITOR=nvim                              # Default Editor

# R: raw output, to allow ANSI colors
# M: verbose prompt, line numbers/ percentage
export LESS="-iRM"
# Colors for man pages
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[01;32m'

export GREP_OPTIONS="-i"                        # Options for grep
export HOMEBREW_NO_GITHUB_API=1                 # Homebrew: don't use my GitHub account (returns errors)

# Bindkey

bindkey -e                                      # Emacs style bindings
bindkey ' ' magic-space                         # Magic space for history expansion
bindkey '^r' history-incremental-search-backward # History search
bindkey "^[[3~" delete-char                     # Delete key
bindkey '^u' backward-kill-line                 # Delete from cursor to beginning
bindkey '^[[Z' reverse-menu-complete            # Shift-tab for moving backwards in menus

# Up/Down arrows history search
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^[[A' history-beginning-search-backward-end
bindkey '^[[B' history-beginning-search-forward-end

# Options

setopt appendhistory
setopt autocd
setopt autopushd
setopt extendedhistory
setopt histexpiredupsfirst
setopt histfindnodups
setopt histignoredups
setopt histignorespace
setopt histverify
setopt incappendhistory
setopt interactivecomments
setopt pushdignoredups
setopt sharehistory

# Completion colors: empty string ("") would use the shell's defaults ($LSCOLORS),
# but zsh doesn't support BSD style $LSCOLORS so here is the equivalent in Linux style $LS_COLORS
zstyle ":completion:*" list-colors "di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
# Case insensitive autocomplete
zstyle ":completion:*" matcher-list "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=*" "l:|=* r:|=*"
# Show a menu for completions
zstyle ":completion:*" menu select
# Kill processes autocomplete
zstyle ":completion:*:*:kill:*:processes" list-colors "=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01"
zstyle ":completion:*:*:*:*:processes" command "ps -u `whoami` -o pid,user,comm -w -w"
# Users autocomplete, hide irrelelvant users
zstyle ":completion:*:*:*:users" ignored-patterns \
    adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
    clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
    gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
    ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
    named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
    operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
    rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
    usbmux uucp vcsa wwwrun xfs "_*"
# Disable named-directories autocompletion
zstyle ":completion:*:cd:*" tag-order local-directories directory-stack path-directories

# Aliases

alias c=clear
alias d="dirs -v"
alias h=history
alias j=z
alias u=users
alias t=tmux
alias vim=nvim
alias vimr="vim -M"

# File management
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias -- -="cd -"
alias la="ls -a"
alias ll="ls -lh"
alias l="ls -lha"
alias mkdir="mkdir -pv"
alias du="du -h"

# Git
alias gs="git status -sb"

# macOS
alias showfiles="defaults write com.apple.finder AppleShowAllFiles YES && killall Finder"
alias hidefiles="defaults write com.apple.finder AppleShowAllFiles NO && killall Finder"
alias emptytrash="trash -e"
alias battery="pmset -g batt"

# Editing
alias ev="$EDITOR ~/.vimrc"
alias ez="$EDITOR ~/.zshrc"
alias reload="source ~/.zshrc"
alias todo="$EDITOR ~/todo.md"

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Small python webserver
alias small-server="python -m SimpleHTTPServer 3000 ."

# Show active network interfaces
alias ifactive="ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active'"

# Global aliases
alias -g G="|grep"
alias -g L="|less"
alias -g Y="|yank"
alias -g C="|lolcat"
alias -g H="|head"
alias -g T="|tail"

# Websearch from command line
alias bing='web_search bing'
alias github='web_search github'
alias google='web_search google'

# Functions

# Usage: compresspdf [input file] [output file] [screen*|ebook*|printer|prepress]
compresspdf() {
    \gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-"ebook"} \
        -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}

# Open the detached session or start a new one
tmux() {
    if [[ -n "$@" ]]; then
        command tmux "$@"
        return
    fi

    if [[ "$TERM" != "screen" ]] && 
        [[ "$SSH_CONNECTION" == "" ]] &&
        [[ -z "$TMUX" ]]; then
    # Attempt to discover a detached session and attach 
    # it, else create a new session
        SESSION_NAME=base
        command tmux new -A -s $SESSION_NAME
    fi
}

# Find in current directory shortcut
f() {
    find . -iname "*${1}*"
}

# Shortcut for opening a file or the current directory in macOS Finder
o() {
    open ${1:-"."}
}

# Get statistics on most commonly used commands
history_stats() {
    fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " \
        CMD[a]/count*100 "% " a;}' | grep -v "./" | \
        column -c3 -s " " -t | sort -nr | nl |  head -n20
}

# Web searching from the command line, taken from oh-my-zsh
function web_search() {
    emulate -L zsh

    # define search engine URLs
    typeset -A urls
    urls=(
        google      "https://www.google.com/search?q="
        bing        "https://www.bing.com/search?q="
        yahoo       "https://search.yahoo.com/search?p="
        duckduckgo  "https://www.duckduckgo.com/?q="
        startpage   "https://www.startpage.com/do/search?q="
        yandex      "https://yandex.ru/yandsearch?text="
        github      "https://github.com/search?q="
        baidu       "https://www.baidu.com/s?wd="
        ecosia      "https://www.ecosia.org/search?q="
        goodreads   "https://www.goodreads.com/search?q="
    )

    # check whether the search engine is supported
    if [[ -z "$urls[$1]" ]]; then
        echo "Search engine $1 not supported."
        return 1
    fi

    # search or go to main page depending on number of arguments passed
    if [[ $# -gt 1 ]]; then
        # build search url:
        # join arguments passed with '+', then append to search engine URL
        url="${urls[$1]}${(j:+:)@[2,-1]}"
    else
        # build main page url:
        # split by '/', then rejoin protocol (1) and domain (2) parts with '//'
        url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
    fi

    # for macOS
    open "$url"
}

# fzf

# Load fzf tab completion and key bindings
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Use fzf to cd
# Direct descendants
fd() {
    local dir
    dir=$(find . -maxdepth 1 -path './.*' -prune -o -type d -print |
        sed '1d;s#^./##' |
        fzf --height 20 --reverse --query "$1" --select-1 --exit-0) && cd "$dir"
}

# Whole tree
fcd() {
    local dir
    dir=$(find ${1:-*} -path '*/\.*' -prune \
        -o -type d -print 2>/dev/null | fzf +m) &&
        cd "$dir"
}

# Including hidden directories
fcda() {
    local dir
    dir=$(find ${1:-.} -type d 2>/dev/null |
        fzf +m) && cd "$dir"
}

# Combine z and fzf
unalias z 2> /dev/null
z() {
    [ $# -gt 0 ] && _z "$*" && return
    cd "$(_z -l 2>&1 |
        fzf --height 40% --nth 2.. --reverse --inline-info +s --tac \
        --query "${*##-* }" |
        sed 's/^[0-9,.]* *//')"
}

# Start tmux
tmux
