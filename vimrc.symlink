" vim-plug and plugin settings {{{

" Download vim-plug if it's not installed already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Start vim-plug and list plugins
call plug#begin('~/.vim/plugged')

" Colorschemes
Plug 'dracula/vim'
Plug 'tomasr/molokai'
Plug 'sjl/badwolf'
Plug 'AlessandroYorba/Sierra'

" Utilities
Plug '/usr/local/opt/fzf'                   " Fzf is installed locally through brew
Plug 'junegunn/fzf.vim'                     " Vim fzf bindings
Plug 'tpope/vim-commentary'                 " Un/comment easily (gcc)
Plug 'tpope/vim-surround'                   " Surround objects with ([{' etc.
Plug 'tpope/vim-fugitive'

" Deoplete
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'wokalski/autocomplete-flow'
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }

Plug 'SirVer/UltiSnips'                     " Text/Code snippets
Plug 'mattn/emmet-vim'                      " Emmet plugin. Usage: <C-y>, to expand

" End vim-plug listing
call plug#end()

" Start deoplete
let g:deoplete#enable_at_startup = 1
" let g:deoplete#sources#ternjs#docs = 1
" let g:deoplete#sources#ternjs#types = 1

" Map tab when completion is open
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<Tab>"
autocmd FileType html,css imap <Leader><Tab> <plug>(emmet-expand-abbr)

" UltiSnips settings
let g:UltiSnipsSnippetsDir = $HOME . '/.vim/UltiSnips'

let g:UltiSnipsExpandTrigger = '<nop>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" Map Enter to expanding snippet when completion is open
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction

inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" Customize fzf colors
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" }}}

" Colors {{{

colorscheme dracula         " Color scheme/theme

" Customize colorschemes
augroup Colors
    autocmd!
    autocmd ColorScheme * call CustomHighlights()
augroup END

" Customize highlight colors with autocmd to override colorschemes
function! CustomHighlights()
    " Customize dracula colorscheme
    if g:colors_name == 'dracula'
        " Pink statusline
        highlight StatusLine ctermbg=176 
        " Comments in italics
        highlight Comment cterm=italic
    endif
    
    " highlight User1 
    " Disable background to be consistent with tmux active panes
    " highlight NonText ctermbg=NONE
    " highlight Normal ctermbg=NONE
endfunction

syntax enable               " Enable syntax processing/highlighting

" }}}

" Indentation {{{

set shiftwidth=4            " Actual number of spaces for each indentation step
set tabstop=4               " Number of visual spaces per TAB
set softtabstop=4           " Number of spaces in tab when editing
set expandtab               " Tabs are spaces

set autoindent
set smartindent

" }}}

" UI Layout {{{

set hidden                  " Allow hidden Buffers

set number                  " Show line numbers
set relativenumber          " Relative line numbers, together they are hybrid

set backspace=indent,eol,start  " Make backspace less limited

set linebreak               " Wordwrapping not in the middle of words

set showcmd                 " Show command in bottom bar
set cursorline              " Highlight current line, see next few line

" Show/hide cursorline for current window only
augroup Focus
    autocmd!
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

set clipboard=unnamed       " macOS clipboard

set mouse=a                 " Enable mouse support
if !has('nvim')
    set ttymouse=sgr        " Fast modern mouse draggin
endif

filetype indent on          " Load filetype-specific indent files, also enables filetype detection

set wildmenu                " Visual autocompletion for command line

set lazyredraw              " Redraw only when we need, not in the middle of macros (faster)

set showmatch               " Highlight matching [{()}]

set scrolloff=3             " Start scrolling before reaching the first or last lines

set splitbelow              " Default to new splits below and to the right
set splitright
" special characters for formatting. set list to enable (<leader>l)
set listchars=nbsp:⦸
set listchars+=tab:▷┅
set listchars+=eol:¬
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=trail:•

let &t_SI = "\<Esc>[6 q"    " use a solid | cursor in insert mode
let &t_EI = "\<Esc>[2 q"    " use a solid rectangle cursor otherwise

if exists('&belloff')
    set belloff=all         " never ring the bell for any reason
endif

" }}}

" Statusline {{{

set laststatus=2            " Always show status line

" Function to pad the column line for less jittery movement
function! Statusline_col()
    let l:curCol=virtcol('.')
    if len(l:curCol) < 2
        return ' ' . l:curCol
    endif
    return l:curCol
endfunction

augroup Statusline
    autocmd!
    autocmd BufEnter,WinEnter * call Focus_statusline()
    autocmd WinLeave * call Blur_statusline()
augroup END

function! Focus_statusline()
    setlocal statusline=\            " Space
    setlocal statusline+=\           " Space
    setlocal statusline+=%f          " Short filename
    setlocal statusline+=%*          " Space
    setlocal statusline+=%m          " Modified flag
    setlocal statusline+=%r          " Readonly flag
    setlocal statusline+=%=          " Split point to right side
    setlocal statusline+=%y          " Filetype
    setlocal statusline+=\           " Space
    setlocal statusline+=Ln\ %l/%L   " Line number / Total lines
    setlocal statusline+=\ :\        " Separator
    setlocal statusline+=Col\        " Column number (padded)
    setlocal statusline+=%{Statusline_col()}
    setlocal statusline+=\ ◼\        " Separator ☲
    setlocal statusline+=%p%%        " Percent through file
    setlocal statusline+=\           " Space
    setlocal statusline+=\           " Space
endfunction

function! Blur_statusline()
    setlocal statusline=\            " Space
    setlocal statusline+=\           " Space
    setlocal statusline+=%f          " Short filename
    setlocal statusline+=\           " Space
    setlocal statusline+=%m          " Modified flag
    setlocal statusline+=%r          " Readonly flag
endfunction

" }}}

" Search {{{

set incsearch               " Search as characters are being typed
set hlsearch                " Keep highlighting matches of last search
set ignorecase              " Case insensitive search
set smartcase               " If uppercase letters are included in the search switch to case sensitive

" }}}

" Folding {{{

set foldenable              " Enable folding
set foldlevelstart=10       " Open most folds by default
set foldmethod=indent       " Fold based on indent level

" }}}

" Mappings {{{

let mapleader=","           " Leader mapping

set ttimeoutlen=1           " This fixes the <esc> delay issue

" Alternative mappings for <esc>
inoremap jj <esc>
inoremap jk <esc>

" Easier navigation between windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Quick folding with <space>
nnoremap <space> za

" move vertically by visual line (when lines are wrapping)
" nnoremap j gj
" nnoremap k gk

" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 6 ? "m'" . v:count : '') . 'j'

" fzf mappings
nnoremap <leader><enter> :Buffers<CR>
nnoremap <leader>a :Ag<CR>
nnoremap <leader>c :Colors<CR>
nnoremap <leader>h :Helptags<CR>
nnoremap <leader>t :Files<CR>

" Hide search highlights
nnoremap <leader><space> :nohlsearch<CR>

" Edit .vimrc
nnoremap <leader>ev :vsp $MYVIMRC<CR>

" Edit .zshrc
nnoremap <leader>ez :vsp ~/.zshrc<CR>

" Source .vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" Toggle relative line numbers
nnoremap <leader>r :set relativenumber!<CR>

" Enable special characters
nnoremap <leader>l :set list!<CR>

" Enable spellchecking
nnoremap <leader>s :set spell!<CR>

" <Leader><Leader> -- Open last buffer.
nnoremap <Leader><Leader> <C-^>

" Make current buffer/window full screen
nnoremap <Leader>o :only<CR>
" }}}

" Backups {{{

if exists('$SUDO_USER')
    set nobackup                        " Don't create backups as root
    set nowritebackup
else
    set backupdir=~/.vim/tmp/backup     " Keeps backup files out of the way
    set backupdir+=.
endif

if exists('$SUDO_USER')
    set noswapfile                      " Don't create root-owned files
else
    set directory=~/.vim/tmp/swap//     " Keeps swap files out of the way
    set directory+=.
endif

if has('viminfo')
    if exists('$SUDO_USER')
        set viminfo=                        " Don't create root-owned files
    else
        set viminfo+=n~/.vim/tmp/viminfo    " Override ~/.viminfo default
    endif
endif

if has('mksession')
    set viewdir=~/.vim/tmp/view         " Override ~/.vim/view default
endif

" }}}

set modelines=1
" vim: foldmethod=marker foldlevel=0
