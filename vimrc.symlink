" vim-plug and plugin settings

" Use Neovim XDG directory to load vim-plug on normal Vim
if !has('nvim')
    set runtimepath+=~/.local/share/nvim/site
endif

" Download vim-plug if it's not installed already
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Start vim-plug and list plugins
call plug#begin('~/.local/share/nvim/plugged')

" Colorschemes
Plug 'dracula/vim'
Plug 'tomasr/molokai'
Plug 'sjl/badwolf'
Plug 'AlessandroYorba/Sierra'

" Utilities
Plug '/usr/local/opt/fzf'               " Fzf is installed locally through brew
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'ap/vim-css-color'
Plug 'KabbAmine/vCoolor.vim'

" Completion
Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'SirVer/UltiSnips'
Plug 'mattn/emmet-vim'

call plug#end()
" End vim-plug listing

let g:LanguageClient_autoStart = 1
let g:LanguageClient_diagnosticsEnable = 0
let g:LanguageClient_serverCommands = {}
" javascript: npm -g install javascript-typescript-langserver
if executable('javascript-typescript-stdio')
    let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
    let g:LanguageClient_serverCommands.typescript = ['javascript-typescript-stdio']
endif
" html: npm -g install vscode-html-languageserver-bin
if executable('html-languageserver')
    let g:LanguageClient_serverCommands.html = ['html-languageserver', '--stdio']
endif
" css: npm -g install vscode-css-languageserver-bin
if executable('css-languageserver')
    let g:LanguageClient_serverCommands.css = ['css-languageserver', '--stdio']
endif
" Python: pip install python-language-server
if executable('pyls')
  let g:LanguageClient_serverCommands.python = ['pyls']
endif

let g:deoplete#enable_at_startup = 1

let g:UltiSnipsSnippetsDir = $HOME.'/.config/nvim/UltiSnips'
let g:UltiSnipsExpandTrigger = '<nop>'

" Map Enter to expanding snippet when completion is open
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    endif
    return "\<CR>"
endfunction

inoremap <expr> <CR> pumvisible() 
    \ ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"
imap <expr> <C-j> pumvisible() ? "\<Down>" : "\<C-j>"
imap <expr> <C-k> pumvisible() ? "\<Up>" : "\<C-k>"

" VCoolor colorpicker
let g:vcoolor_map = '<C-Y>c'

" Colors

colorscheme dracula

" Customize color schemes
augroup Colors
    autocmd!
    autocmd ColorScheme * call CustomHighlights()
augroup END

" Customize highlight colors with autocmd to override colorschemes
function! CustomHighlights()
    " Customize dracula colorscheme
    if g:colors_name == 'dracula'
        " Pink statusline
        highlight StatusLine ctermbg=176 
        " Purple completion menu
        highlight Pmenu ctermbg=56
        " Comments in italics
        highlight Comment cterm=italic
    endif
endfunction

syntax enable

" Indentation

set shiftwidth=4            " Actual number of spaces for each indentation step
set tabstop=4               " Number of visual spaces per TAB
set softtabstop=4           " Number of spaces in tab when editing
set expandtab               " Tabs are spaces
set autoindent
set smartindent

" Settings

set hidden                  " Allow hidden Buffers
set number                  " Show line numbers
set relativenumber          " Relative line numbers, together they are hybrid
set backspace=indent,eol,start  " Make backspace less limited
set linebreak               " Wordwrapping not in the middle of words
set showcmd                 " Show command in bottom bar
set cursorline              " Highlight current line, see next few line

augroup Terminal
    autocmd!
    autocmd TermOpen * setlocal nonumber norelativenumber
    autocmd TermOpen * startinsert
augroup END

" Show cursorline for current window only
augroup Focus
    autocmd!
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

set clipboard=unnamed       " macOS clipboard
set mouse=a                 " Enable mouse support
if !has('nvim')
    set ttymouse=sgr        " Fast modern mouse draggin
endif

filetype indent on          " Load filetype-specific indent files, also enables filetype detection

set wildmenu                " Visual autocompletion for command line
set completeopt-=preview    " Disable preview window from automatically showing using autocompletion
set lazyredraw              " Redraw only when we need, not in the middle of macros (faster)
set showmatch               " Highlight matching [{()}]
set scrolloff=3             " Start scrolling before reaching the first or last lines
set splitbelow splitright   " Default to new splits below and to the right

" Special characters for formatting enable (<leader>l)
set listchars=nbsp:⦸        " Non-breakable space character
set listchars+=tab:▷┅       " Tab (two characters)
set listchars+=eol:¬        " End-of-line
set listchars+=extends:»    " Last character of a wrapped line
set listchars+=precedes:«   " First character of a wrapped line
set listchars+=trail:•      " Trailing spaces

" Jump to last cursor position on file load
autocmd BufReadPost *
    \ if &filetype !=# 'gitcommit' && line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

if !has('nvim')
    let &t_SI = "\<Esc>[6 q"    " use a solid | cursor in insert mode
    let &t_EI = "\<Esc>[2 q"    " use a solid rectangle cursor otherwise
endif

" Status line

set laststatus=2            " Always show status line

" Pad the column line number for less jittery movement
function! Statusline_col()
    let l:curCol=virtcol('.')
    if len(l:curCol) < 2
        return ' ' . l:curCol
    endif
    return l:curCol
endfunction

" Get current git branch
function! Statusline_branch()
    if exists('b:git_dir')
        return  '[' . fugitive#head(7) . ']'
    endif
    return ''
endfunction

let g:base_statusline='  %f '               " Short filename
let g:base_statusline.='%{Statusline_branch()}' " Git branch (uses fugitive)
let g:base_statusline.='%m'                 " Modified flag
let g:base_statusline.='%r'                 " Readonly flag

function! Active_statusline()
    if &buftype == 'terminal'
        call Terminal_statusline()
    else
        let &l:statusline=g:base_statusline
        let &l:statusline.='%='                 " Split point to right side
        let &l:statusline.='%y '                " Filetype
        let &l:statusline.='Ln %l/%L'           " Line number / Total lines
        let &l:statusline.=' : '                " Separator
        let &l:statusline.='Col '               " Column number (padded)
        let &l:statusline.='%{Statusline_col()}'
        let &l:statusline.=' ◼ '                " Separator ☲
        let &l:statusline.='%p%%  '             " Percent through file
    endif
endfunction

function! Inactive_statusline()
    if &buftype == 'terminal'
        call Terminal_statusline()
    else
        let &l:statusline=g:base_statusline
    endif
endfunction

function! Terminal_statusline()
    let &l:statusline='  %{b:term_title}'
endfunction

augroup Statusline
    autocmd!
    autocmd BufEnter,WinEnter * call Active_statusline()
    autocmd WinLeave * call Inactive_statusline()
    autocmd TermOpen,TermClose * call Terminal_statusline()
augroup END

" Search

set incsearch               " Search as characters are being typed
set hlsearch                " Keep highlighting matches of last search
set ignorecase              " Case insensitive search
set smartcase               " If uppercase letters are included in the search switch to case sensitive
if exists('+inccommand')
    set inccommand=split    " Incremental search and replace (Neovim)
endif

" Folding

set foldlevelstart=10       " Open most folds by default
set foldmethod=indent       " Fold based on indent level

let g:markdown_folding=1    " Folding for markdown files

" Mappings

let mapleader=" "           " Leader mapping
set ttimeoutlen=1           " This fixes the <esc> delay issue

" Alternative mappings for <esc>
inoremap jj <esc>
inoremap jk <esc>

" Easier navigation between windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Map tab when completion is open
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<Tab>"

" Quick folding with <space>
nnoremap <CR> za

" move vertically by visual line (when lines are wrapping)
" nnoremap j gj
" nnoremap k gk

" fzf mappings
nnoremap <leader><enter> :Buffers<CR>
nnoremap <leader>a :Ag<CR>
nnoremap <leader>c :Colors<CR>
nnoremap <leader>t :Files<CR>
nnoremap <leader>/ :History/<CR>
nnoremap <leader>: :History:<CR>
nnoremap <leader>? :Helptags<CR>

" Hide search highlights
nnoremap <leader><space> :nohlsearch<CR>

" Edit .vimrc
nnoremap <leader>ev :vsp $MYVIMRC<CR>
" Edit .zshrc
nnoremap <leader>ez :vsp ~/.zshrc<CR>
" Source .vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" Toggle line numbers
function! ToggleNumbers()
    if &number && &relativenumber
        setlocal norelativenumber
    elseif &number && !&relativenumber
        setlocal nonumber
    elseif !&number && !&relativenumber
        setlocal number relativenumber
    endif
endfunction

nnoremap <leader>r :call ToggleNumbers()<CR>
" Toggle special characters
nnoremap <leader>l :set list!<CR>
" Toggle spell checking
nnoremap <leader>s :set spell!<CR>
" <leader><leader> -- Open last buffer.
nnoremap <leader>, <C-^>

" Directories

if exists('$SUDO_USER')
    set noswapfile                      " Don't create root-owned files
elseif !has('nvim')                     " Use Neovim XDG directory
    set directory=~/.local/share/nvim/swap// " Keeps swap files out of the way
endif

if has('persistent_undo')
    if exists('$SUDO_USER')
        set noundofile                  " Don't create root-owned files
    else
        set undofile
    endif

    if !has('nvim')                     " Use Neovim XDG directory
        set undodir=~/.local/share/nvim/undo " Keep undo files out of the way
    endif
endif
